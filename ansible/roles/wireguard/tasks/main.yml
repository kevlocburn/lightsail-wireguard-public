---
- name: Install required packages
  apt:
    name:
      - wireguard
      - qrencode
    state: present
  become: yes

- name: Ensure WireGuard configuration directory exists
  file:
    path: /etc/wireguard
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: yes

- name: Generate server private key
  command: wg genkey
  register: server_private_key
  failed_when: server_private_key.stdout is not defined or server_private_key.stdout == ''
  changed_when: server_private_key.stdout is defined and server_private_key.stdout != ''

- name: Save server private key
  copy:
    content: "{{ server_private_key.stdout }}"
    dest: /etc/wireguard/server_private.key
    owner: root
    group: root
    mode: 0600
  become: yes

- name: Generate server public key
  shell: echo "{{ server_private_key.stdout }}" | wg pubkey
  register: server_public_key
  failed_when: server_public_key.stdout is not defined or server_public_key.stdout == ''
  changed_when: server_public_key.stdout is defined and server_public_key.stdout != ''

- name: Save server public key
  copy:
    content: "{{ server_public_key.stdout }}"
    dest: /etc/wireguard/server_public.key
    owner: root
    group: root
    mode: 0600
  become: yes

- name: Generate client private key
  command: wg genkey
  register: client_private_key
  failed_when: client_private_key.stdout is not defined or client_private_key.stdout == ''
  changed_when: client_private_key.stdout is defined and client_private_key.stdout != ''

- name: Save client private key
  copy:
    content: "{{ client_private_key.stdout }}"
    dest: /etc/wireguard/client_private.key
    owner: root
    group: root
    mode: 0600
  become: yes

- name: Generate client public key
  shell: echo "{{ client_private_key.stdout }}" | wg pubkey
  register: client_public_key
  failed_when: client_public_key.stdout is not defined or client_public_key.stdout == ''
  changed_when: client_public_key.stdout is defined and client_public_key.stdout != ''

- name: Save client public key
  copy:
    content: "{{ client_public_key.stdout }}"
    dest: /etc/wireguard/client_public.key
    owner: root
    group: root
    mode: 0600
  become: yes

- name: Check if wg0 interface exists
  shell: ip link show wg0
  register: wg_interface_check
  ignore_errors: true

- name: Bring down wg0 interface (if exists)
  command: wg-quick down wg0
  when: wg_interface_check.rc == 0
  ignore_errors: yes
  become: yes

- name: Delete wg0 interface (failsafe)
  command: ip link delete wg0
  when: wg_interface_check.rc == 0
  ignore_errors: yes
  become: yes

- name: Back up wg0 configuration file
  command: mv /etc/wireguard/wg0.conf /etc/wireguard/wg0.conf.bak
  ignore_errors: yes
  become: yes  

- name: Copy WireGuard configuration file
  template:
    src: wg0.conf.j2
    dest: /etc/wireguard/wg0.conf
    owner: root
    group: root
    mode: '0600'
  vars:
    server_private_key: "{{ server_private_key.stdout }}"
    client_public_key: "{{ client_public_key.stdout }}"
  become: yes

- name: Bring up WireGuard interface
  command: wg-quick up wg0
  become: yes

- name: Enable IP forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes
  become: yes

- name: Set up NAT for WireGuard
  command: iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
  become: yes

- name: Persist iptables rules (optional)
  package:
    name: iptables-persistent
    state: present
  become: yes

- name: Generate client configuration
  template:
    src: client.conf.j2
    dest: /home/ubuntu/client-wg0.conf
    owner: ubuntu
    group: ubuntu
    mode: 0600
  vars:
    client_private_key: "{{ client_private_key.stdout }}"
    server_public_key: "{{ server_public_key.stdout }}"
    server_ip: "{{ wireguard_ip }}"
    server_port: 51820

- name: Ensure client configuration is readable
  file:
    path: /home/ubuntu/client-wg0.conf
    mode: '0644'
  become: yes
